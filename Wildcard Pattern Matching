class Solution
{
    int wildCard(String pat, String str)
    {
        int N = pat.length();
        int M = str.length();
        
        int dp[][] = new int[N+1][M+1];
        
        for(int[] row : dp){
            Arrays.fill(row , -1);
        }
        
        return count(N , M , pat , str , dp);
    }
    
    int count(int n , int m , String pat , String str , int dp[][]){
        
       // Base Cases
    if (n == 0 && m == 0)
      return 1; // Both strings are empty, and the pattern matches.
    if (n == 0 && m > 0)
      return 0; // S1 is empty, but there are characters left in S2.
    if (m == 0 && n > 0)
      return isAllStars(pat, n) ? 1 : 0; // S2 is empty, check if remaining characters in S1 are all '*'.

        
        if(dp[n][m] != -1) return dp[n][m];
        
        if(pat.charAt(n-1) == str.charAt(m-1) || pat.charAt(n-1) == '?'){
             return dp[n][m] = count(n - 1 , m-1 , pat , str , dp);
             
        }
        
        else {
            if(pat.charAt(n-1) == '*'){
            return  dp[n][m] = (count(n  , m-1 , pat , str , dp) == 1 || 
            count(n - 1 , m , pat , str , dp) == 1 ) == true ? 1 : 0 ;
         }
        
          else{
              return 0;
          } 
        }
    }
    
     boolean isAllStars(String S1, int i) {
    for (int j = 0; j < i; j++) {
      if (S1.charAt(j) != '*')
        return false;
    }
    return true;
  }
}
