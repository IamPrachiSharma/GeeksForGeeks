class Solution {
    public static ArrayList<Integer> KDistanceNodes(Node root, int target, int k) {
        Map<Node, Node> parent = new HashMap<>();
        populateParentMap(parent, root); // Populate parent map using DFS or BFS
        
        Queue<Node> queue = new LinkedList<>();
        Map<Node, Boolean> visited = new HashMap<>();
        visited.put(findNode(root, target), true);
        queue.offer(findNode(root, target));
        int level = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            if (level == k) break;
            level++;
            
            while (size-- > 0) {
                Node curr = queue.poll();
                Node left = curr.left;
                Node right = curr.right;
                
                if (left != null && !visited.containsKey(left)) {
                    visited.put(left, true);
                    queue.offer(left);
                }
                
                if (right != null && !visited.containsKey(right)) {
                    visited.put(right, true);
                    queue.offer(right);
                }
                
                Node parentNode = parent.get(curr);
                if (parentNode != null && !visited.containsKey(parentNode)) {
                    visited.put(parentNode, true);
                    queue.offer(parentNode);
                }
            }
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        while (!queue.isEmpty()) {
            result.add(queue.poll().data);
        }
        
        Collections.sort(result);
        return result;
    }
    
    private static void populateParentMap(Map<Node, Node> parent, Node root) {
        if (root == null) return;
        
        if (root.left != null) {
            parent.put(root.left, root);
            populateParentMap(parent, root.left);
        }
        
        if (root.right != null) {
            parent.put(root.right, root);
            populateParentMap(parent, root.right);
        }
    }
    
    private static Node findNode(Node root, int target) {
        if (root == null || root.data == target) {
            return root;
        }
        
        Node left = findNode(root.left, target);
        if (left != null) {
            return left;
        }
        
        return findNode(root.right, target);
    }
}
