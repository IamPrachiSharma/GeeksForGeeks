class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        // add your code
        Map<Integer,Pair> map = new TreeMap<>();

        ArrayList<Integer> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        traverseStoreIndex(root,0,0,map);
        //map.entrySet().stream().forEach(e->list.add(e.getValue()));
        map.values().stream().forEach(value -> list.add(value.data));
    //    for(Map.Entry<Integer,Pair> enrySet : map.entrySet()){
    //        Pair p = enrySet.getValue(); 
    //        list.add(p.data);
    //    }
        return list;
        
    }
    private static void traverseStoreIndex(Node root,int index,int height,Map<Integer,Pair> map){
        if(root == null){
            return;
        }
        if(!map.containsKey(index)){
           map.put(index,new Pair(root.data,height));
        }else{
            Pair p = map.get(index);
            if(p.height > height){
                map.put(index,new Pair(root.data,height));
            }
        }
         
        traverseStoreIndex(root.left,index-1,height+1,map);
        traverseStoreIndex(root.right,index+1,height+1,map);
    }
}

class Pair {
    int data = 0;
    int height = 0;
    Pair(int data, int height){
        this.data = data;
        this.height = height;

    }
}
